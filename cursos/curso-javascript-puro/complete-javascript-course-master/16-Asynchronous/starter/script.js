'use strict';

const btn = document.querySelector('.btn-country');
const countriesContainer = document.querySelector('.countries');
// btn.style.display = 'none';

const renderCountry = function (data, className = '') {
  const html = `
      <article class="country ${className}">
        <img class="country__img" src="${data.flag}" />
        <div class="country__data">
          <h3 class="country__name">${data.name}</h3>
          <h4 class="country__region">${data.region}</h4>
          <p class="country__row"><span>üë´</span>${(
            +data.population / 1000000
          ).toFixed(1)}</p>
          <p class="country__row"><span>üó£Ô∏è</span>${data.languages[0].name}</p>
          <p class="country__row"><span>üí∞</span>${data.currencies[0].name}</p>
        </div>
      </article>
      `;
  countriesContainer.insertAdjacentHTML('beforeend', html);
  countriesContainer.style.opacity = '1';
};

const renderError = function (msg) {
  countriesContainer.insertAdjacentText('beforeend', msg);
  countriesContainer.style.opacity = 1;
};

///////////////////////////////////////

// Asynchronous JS
/*
RESUMO: 
1. C√≥digo ass√≠ncrono √© √∫til quando algo leva tempo para ser processado.
2. Ele √© n√£o-bloqueante, permitindo que o resto do c√≥digo seja executado enquanto esperamos.
3. O uso de fun√ß√µes de callback (como a que aparece dentro do setTimeout()) permite que o JavaScript saiba o que fazer depois que a tarefa em segundo plano for conclu√≠da.

Ex: 
const img = document.querySelector('.dog')
img.src = 'dog.jpg'
img.addEventListener('load'. function() {
  img.classList.add('fadeIn');
})
p.style.width = '300px';

O evente s√≥ vai ocorrer quando a imagem estiver carregada, enquanto isso n√£o acontece, 
o resto do c√≥digo funciona normalmente, mas quando carregar, o evento ser√° executado.

Um evento de click por exemplo, n√£o √© ass√≠ncrono, ele apenas est√° esperando para ser disparado. 
O que faz o exemplo da imagem ser ass√≠ncrono √© o fato da imagem estar constantemente carregando 
no background da p√°gina.
*/

// AJAX
/*
Asynchronous JavaScript And XML

1. O que √© AJAX?
AJAX √© uma tecnologia que permite que o navegador (cliente) se comunique 
com um servidor web sem precisar recarregar a p√°gina inteira.

Ela usa JavaScript para enviar solicita√ß√µes ao servidor (como pedir ou enviar dados) 
e depois atualizar partes espec√≠ficas da p√°gina com a resposta, dinamicamente 
e ass√≠ncronamente.

2. Ass√≠ncrono e Din√¢mico
Ass√≠ncrono significa que enquanto o navegador espera uma resposta do servidor, 
o usu√°rio ainda pode continuar interagindo com a p√°gina sem interrup√ß√£o. 
Isso torna a navega√ß√£o mais r√°pida e fluida, j√° que n√£o h√° a necessidade de 
recarregar a p√°gina inteira cada vez que algo √© solicitado ao servidor.
*/

// API
/*
1. O que √© uma API?

API (Interface de Programa√ß√£o de Aplica√ß√µes) √© uma pe√ßa de software que permite que diferentes aplica√ß√µes conversem entre si.
Em desenvolvimento web, uma API permite que o front-end (interface do usu√°rio) solicite e receba dados de um servidor ou outro servi√ßo.

2. Tipos de APIs

Existem v√°rios tipos de APIs usados no desenvolvimento web. Alguns exemplos listados no slide incluem:

DOM API: Interface que permite manipular o HTML e CSS da p√°gina web.
Geolocation API: Interface que permite acessar a localiza√ß√£o geogr√°fica do usu√°rio.
Own Class API: Uma API customizada que voc√™ pode criar para resolver problemas espec√≠ficos.
"Online" API: APIs que rodam em servidores remotos e que fornecem dados atrav√©s de solicita√ß√µes 
feitas por uma aplica√ß√£o. 
Geralmente, quando algu√©m menciona "API" hoje em dia, eles est√£o se referindo a esse tipo.

3. APIs Online

Uma Online API √© uma aplica√ß√£o que fica em um servidor e responde a requisi√ß√µes de dados.
Voc√™ pode construir sua pr√≥pria API (utilizando frameworks como Node.js) ou usar 
APIs de terceiros (como o Google Maps ou APIs de clima).

4. Como AJAX Interage com APIs?

Formatos de dados: As APIs geralmente usam dois formatos de dados principais:

XML: Antigamente, XML era o formato de dados mais usado para APIs, mas hoje √© menos comum.
JSON (JavaScript Object Notation): O formato mais popular atualmente, sendo leve e f√°cil de trabalhar, 
especialmente em JavaScript.
*/

///////////////////////////////////////
// Our First AJAX Call: XMLHttpRequest

// const getCountryData = function (country) {
//   const request = new XMLHttpRequest();
//   request.open(
//     'GET',
//     `https://countries-api-836d.onrender.com/countries/name/${country}`
//   );
//   request.send();

//   request.addEventListener('load', function () {
//     const [data] = JSON.parse(this.responseText);
//     console.log(data);

//     const html = `
//     <article class="country">
//       <img class="country__img" src="${data.flag}" />
//       <div class="country__data">
//         <h3 class="country__name">${data.name}</h3>
//         <h4 class="country__region">${data.region}</h4>
//         <p class="country__row"><span>üë´</span>${(
//           +data.population / 1000000
//         ).toFixed(1)}</p>
//         <p class="country__row"><span>üó£Ô∏è</span>${data.languages[0].name}</p>
//         <p class="country__row"><span>üí∞</span>${data.currencies[0].name}</p>
//       </div>
//     </article>
//     `;
//     countriesContainer.insertAdjacentHTML('beforeend', html);
//     countriesContainer.style.opacity = '1';
//   });
// };
// getCountryData('brazil');
// getCountryData('usa');

// Como o AJAX acontece de forma ass√≠crona, ou seja, ao mesmo tempo, as vezes os dados de uma API
// chegam mais r√°pido que os de outra, por isso a ordem √© aleat√≥ria, mas concertaremos isso com callback hell

/////////////////////////////////////////////
// How the web works: request and response

/*

DNS Lookup (Pesquisa DNS)

Quando um cliente (como um navegador) quer acessar um site, ele primeiro precisa descobrir 
o endere√ßo IP do servidor. Isso √© feito atrav√©s de uma pesquisa DNS (Domain Name System),
que converte o dom√≠nio (por exemplo, restcountries.eu) em um endere√ßo IP (exemplo no slide: 104.27.142.889).
Import√¢ncia: O DNS funciona como uma "agenda de telefones" para a web, ajudando a localizar o servidor certo.

2. Conex√£o TCP/IP

Depois de descobrir o endere√ßo IP, o cliente faz uma conex√£o TCP/IP com o servidor, 
que estabelece o canal de comunica√ß√£o para a troca de dados.
Protocolo: A conex√£o usa o protocolo HTTP ou HTTPS (HTTP seguro) para enviar as solicita√ß√µes 
e receber respostas.

3. HTTP Request (Solicita√ß√£o HTTP)

O cliente envia uma requisi√ß√£o HTTP ao servidor. A requisi√ß√£o cont√©m v√°rias informa√ß√µes:

Start Line: Inclui o m√©todo HTTP (ex: GET), o caminho do recurso (ex: /rest/v2/alpha/PT), 
e a vers√£o do HTTP (ex: HTTP/1.1).

Headers: S√£o dados adicionais que fornecem informa√ß√µes sobre a solicita√ß√£o, como o host (www.google.com), 
o user-agent (navegador do cliente), e o idioma aceito (en-US).

Body (Corpo da solicita√ß√£o): O corpo s√≥ √© inclu√≠do em alguns m√©todos, como POST, 
quando o cliente est√° enviando dados para o servidor (n√£o exibido neste exemplo de GET).

4. HTTP Response (Resposta HTTP)

O servidor processa a requisi√ß√£o e responde com uma resposta HTTP. A resposta inclui:

Start Line: Inclui a vers√£o do HTTP (HTTP/1.1), um status code (ex: 200 OK para sucesso)
e uma mensagem de status.

Headers: Cabe√ßalhos da resposta com detalhes sobre o tipo de conte√∫do (Content-Type), 
o tamanho, e a codifica√ß√£o de transfer√™ncia.

Body: O conte√∫do da resposta (geralmente em JSON ou HTML), que √© o dado solicitado pelo cliente.

*/

/////////////////////////////
// Welcome to callback hell

// const getCountryAndNeighbour = function (country) {
//   const request = new XMLHttpRequest();
//   request.open(
//     'GET',
//     `https://countries-api-836d.onrender.com/countries/name/${country}`
//   );
//   request.send();

//   request.addEventListener('load', function () {
//     const [data] = JSON.parse(this.responseText);
//     console.log(data);

//     // Render country 1
//     renderCountry(data);

//     // Get neighbour country (2)
//     const neighbour = data.borders?.[0];

//     // AJAX call country 2
//     const request2 = new XMLHttpRequest();
//     request2.open(
//       'GET',
//       `https://countries-api-836d.onrender.com/countries/alpha/${neighbour}`
//     );
//     request2.send();

//     request2.addEventListener('load', function () {
//       const data2 = JSON.parse(this.responseText);
//       console.log(data2);

//       renderCountry(data2, 'neighbour');
//     });
//   });
// };
// getCountryAndNeighbour('brazil');
// getCountryAndNeighbour('usa');

// setTimeout(() => {
//   console.log('1 second passed');
//   setTimeout(() => {
//     console.log('2 second passed');
//     setTimeout(() => {
//       console.log('3 second passed');
//       setTimeout(() => {
//         console.log('4 second passed');
//       }, 1000);
//     }, 1000);
//   }, 1000);
// }, 1000);

// Callback hell s√£o muitas callback functions uma dentro da outra, normalmente tem esse formato triangular...
// N√£o √© uma boa pr√°tica pois torna o c√≥digo complicado e dif√≠cil de ler, e isso √© um c√≥digo ruim...

////////////////////////////
// Promisses and Fetch API

// const request = fetch(
//   'https://countries-api-836d.onrender.com/countries/name/brazil'
// );
// console.log(request);

// TEORIA
/*
O que s√£o Promises?

1. Promise: Um objeto que serve como um placeholder para o resultado de uma opera√ß√£o ass√≠ncrona no futuro.
2. A Promise atua como um "container" para um valor que ser√° entregue de forma ass√≠ncrona, ou seja, 
o valor que ser√° conhecido no futuro (assim que a opera√ß√£o terminar).
3. Em vez de usar eventos ou callbacks para tratar resultados ass√≠ncronos, podemos usar Promises para
organizar opera√ß√µes ass√≠ncronas de forma sequencial, o que evita o "callback hell" (uma situa√ß√£o onde 
temos callbacks aninhados demais).

O ciclo de vida de uma Promise
Uma Promise tem tr√™s estados:

Pending (Pendente): Quando a opera√ß√£o ass√≠ncrona ainda est√° em andamento. Ainda n√£o sabemos o resultado.
Fulfilled (Cumprida): Quando a opera√ß√£o √© bem-sucedida, e o valor esperado foi entregue.
Rejected (Rejeitada): Quando algo deu errado durante a opera√ß√£o ass√≠ncrona, e temos um erro.

Enquanto a Promise est√° pendente, ela est√° "esperando" o resultado. Quando a opera√ß√£o termina, 
a Promise vai para o estado Settled (resolvido), que pode ser Fulfilled (com sucesso) ou Rejected (com erro).
O ponto principal √© que podemos manipular esses estados com c√≥digo, usando .then() para o estado 
Fulfilled e .catch() para o estado Rejected.
*/

////////////////////////
// Consuming Promises
// const request = fetch(
//   'https://countries-api-836d.onrender.com/countries/name/brazil'
// );
// console.log(request);

// const getCountryData = function (country) {
//   fetch(`https://countries-api-836d.onrender.com/countries/name/${country}`)
//     .then(function (response) {
//       console.log(response);
//       return response.json();
//     })
//     .then(function (data) {
//       console.log(data);
//       renderCountry(data[0]);
//     });
// };

///////////////////////
// Chaining Promises

// const renderError = function (msg) {
//   countriesContainer.insertAdjacentText('beforeend', msg);
//   countriesContainer.style.opacity = 1;
// };

// const getCountryData = function (country) {
//   // Country 1
//   fetch(`https://countries-api-836d.onrender.com/countries/name/${country}`)
//     .then(response => {
//       console.log(response);

//       // Throw retorna o promise como rejected, levando ao catch que mostra o erro e a mensagem abaixo.
//       if (!response.ok)
//         throw new Error(`Country not found (${response.status})`);

//       response.json();
//     })
//     .then(data => {
//       renderCountry(data[0]);
//       // const neighbour = data[0].borders?.[0];
//       // Neste caso, teriamos que copiar a mesagem de erro, por√©m n√£o √© uma boa pr√°tica repertirmos o c√≥digo, ent√£o precisamos de uma helper function
//       const neighbour = 'asdksadnjan';

//       // Country 2
//       return fetch(
//         `https://countries-api-836d.onrender.com/countries/alpha/${neighbour}`
//       );
//     })
//     .then(response => response.json())
//     .then(data => renderCountry(data, 'neighbour'))
//     .catch(err => {
//       console.error(`${err}üí£üí£üí£`);
//       renderError(`Something went wrong üí£üí£üí£${err.message}. Try again!`);
//     })
//     .finally(() => {
//       countriesContainer.style.opacity = '1';
//     });
// };
// getCountryData('brazil');

// O valor do pr√≥ximo par√¢metro de .then() ser√° sempre o retorno do .then() anterior
// Nunca coloque o .then() em seguida da fun√ß√£o retornada, pois assim, estariamos utilizando novamente o callback hell function

////////////////////////////////
// Handling Rejected Promises
const getJSON = function (url, errorMsg = 'Something went wrong') {
  return fetch(url).then(response => {
    if (!response.ok) throw new Error(`${errorMsg} (${response.status})`);

    return response.json();
  });
};

//     return response.json();
//   });
// };

// const getCountryData = function (country) {
//   // Country 1
//   getJSON(
//     `https://countries-api-836d.onrender.com/countries/name/${country}`,
//     'Country not found'
//   )
//     .then(data => {
//       renderCountry(data[0]);
//       const neighbour = data[0].borders?.[0];

//       if (!neighbour) throw new Error('No neighbour found!');

//       // Country 2
//       return getJSON(
//         `https://countries-api-836d.onrender.com/countries/alpha/${neighbour}`,
//         'Country not found'
//       );
//     })
//     .then(data => renderCountry(data, 'neighbour'))
//     .catch(err => {
//       console.error(`${err}üí£üí£üí£`);
//       renderError(`Something went wrong üí£üí£üí£${err.message}. Try again!`);
//     })
//     .finally(() => {
//       countriesContainer.style.opacity = '1';
//     });
// };

// btn.addEventListener('click', function () {
// getCountryData('brazil');
// });

// Caso o pa√≠s n√£o tenha vizinhos, precisamos emitir um erro espec√≠fico, caso contr√°rio, retornar√° o erro do catch, que n√£o √© v√°lido para o usu√°rio
// getCountryData('japan');
// getCountryData('aaaaaaaaaaaaaaa');

// Sempre use catch, n√£o √© uma boa pr√°tica deixar promises vagando sem serem tratadas.

////////////////////////
// Coding Challenge #1
// const whereAmI = function (lat, lng) {
//   fetch(
//     `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lng}`
//   )
//     .then(response => {
//       if (!response.ok) throw new Error(`Error ${data.status}`);
//       return response.json();
//     })
//     .then(data => {
//       const { city, countryName, latitude, longitude, continent, countryCode } =
//         data;
//       console.log(data);
//       console.log(`You are in ${city}, ${countryName}`);

//       if (!city || !countryName) throw new Error(`Error ${data.status}`);

//       return fetch(
//         `https://countries-api-836d.onrender.com/countries/name/${countryName}`
//       );
//     })
//     .then(res => {
//       if (!res.ok) throw new Error(`Error ${data.status}`);
//       return res.json();
//     })
//     .then(data => renderCountry(data[0]))
//     .catch(err =>
//       console.error(`Error, coordinates is not founded. (${err.message})`)
//     );
// };
// btn.addEventListener('click', function () {
//   whereAmI(52.508, 13.381);
//   whereAmI(19.037, 72.873);
//   whereAmI(-33.933, 18.474);
// });

// Test data:
// ¬ß Coordinates 1: 52.508, 13.381 (Latitude, Longitude)
// ¬ß Coordinates 2: 19.037, 72.873
// ¬ß Coordinates 3: -33.933, 18.474

/////////////////////////////////////////////////
// How Asynchronous JS Works Behind The Scenes

/*
Fluxo de Execu√ß√£o Ass√≠ncrono:
Call Stack (Pilha de Execu√ß√£o):

O Call Stack √© a pilha de execu√ß√£o onde o JavaScript executa as fun√ß√µes de forma s√≠ncrona. 
Quando uma fun√ß√£o √© chamada, ela √© empilhada no Call Stack e s√≥ √© removida quando termina 
sua execu√ß√£o.

Exemplo: Fun√ß√µes como log() ou querySelector() entram na pilha e s√£o executadas imediatamente.

Web APIs:
Quando o JavaScript encontra uma fun√ß√£o ass√≠ncrona, como setTimeout(), fetch(), 
ou manipuladores de eventos (addEventListener()), ele delega essas tarefas √†s Web APIs.
As Web APIs s√£o executadas no "background" (por exemplo, carregamento de imagens ou 
requisi√ß√µes de rede).
Essas tarefas n√£o bloqueiam o Call Stack.

Event Loop:
O event loop monitora o Call Stack e as filas de tarefas.
Ele verifica se o Call Stack est√° vazio, e ent√£o decide qual fun√ß√£o ser√° processada 
a seguir das filas de callbacks ou microtasks.

Callback Queue:
Quando uma tarefa ass√≠ncrona (como um setTimeout) √© conclu√≠da, seu callback √© enviado 
para a Callback Queue.
O event loop ir√° mover esses callbacks para o Call Stack quando a pilha estiver vazia.

Microtasks Queue:
A Microtasks Queue lida principalmente com Promises resolvidas ou rejeitadas.
Importante: Microtasks t√™m prioridade sobre a Callback Queue, ent√£o s√£o executadas primeiro.
Exemplo: Um .then() associado a uma Promise resolvida entra na fila de microtarefas e ser√° 
processado antes de outros callbacks como setTimeout.

Em Resumo:
O JavaScript √© single-threaded, mas atrav√©s das Web APIs, Event Loop, Callback Queue
e Microtasks Queue, ele consegue executar c√≥digo de forma n√£o-bloqueante. Isso significa 
que o JavaScript pode realizar v√°rias tarefas ao mesmo tempo (como manipular eventos de 
DOM ou buscar dados de um servidor) sem parar a execu√ß√£o do restante do c√≥digo.
*/

///////////////////////////////
// The Events Loop In Practice
// console.log('Test start');
// setTimeout(() => console.log('0 sec timer'), 0);
// Promise.resolve('Resolved promise 1').then(res => console.log(res));
// Promise.resolve('Resolved promise 2').then(res => {
// for (let i = 0; i < 10000000000000; i++) {}
//   console.log(res);
// });
// console.log('Test end');

/////////////////////////////
// Building a Simple Promise

// const lotteryPromise = new Promise(function (resolve, rejected) {
//   console.log('Lottery draw is happening üîÆ');
//   setTimeout(() => {
//     if (Math.random() >= 0.5) resolve('You WIN üí∞');
//     else rejected(new Error('You lost your money üí©. F'));
//   }, 2000);
// });

// lotteryPromise.then(res => console.log(res)).catch(err => console.log(err));

// Promisifying setTimeout
// const wait = function (seconds) {
//   return new Promise(function (resolve) {
//     setTimeout(resolve, seconds * 1000);
//   });
// };

// wait(1)
//   .then(() => {
//     console.log('1 second passed');
//     return wait(1);
//   })
//   .then(() => {
//     console.log('2 second passed');
//     return wait(1);
//   })
//   .then(() => {
//     console.log('3 second passed');
//     return wait(1);
//   })
//   .then(() => console.log('4 second passed'));

// Compara√ß√£o com callback hell ‚¨á‚¨á‚¨á

// setTimeout(() => {
//   console.log('1 second passed');
//   setTimeout(() => {
//     console.log('2 second passed');
//     setTimeout(() => {
//       console.log('3 second passed');
//       setTimeout(() => {
//         console.log('4 second passed');
//       }, 1000);
//     }, 1000);
//   }, 1000);
// }, 1000);

///////////////////////////
// Simple Create Promises

// Promise.resolve('abc').then(x => console.log(x));
// Promise.reject(new Error('nt')).catch(x => console.error(x));

////////////////////////////////////
// Promisifying the Geolocation API

// const getPosition = function () {
//   return new Promise(function (resolve, reject) {
// navigator.geolocation.getCurrentPosition(
//   position => resolve(position),
//   err => reject(err)
// );
//     navigator.geolocation.getCurrentPosition(resolve, reject);
//   });
// };
// getPosition().then(pos => console.log(pos));

// const whereAmI = function () {
//   getPosition()
//     .then(pos => {
//       const { longitud: lat, latitude: lng } = pos.coords;

//       return fetch(
//         `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lng}`
//       );
//     })
//     .then(response => {
//       if (!response.ok)
//         throw new Error(`Problem with geocoding ${data.status}`);
//       return response.json();
//     })
//     .then(data => {
//       const { city, countryName, latitude, longitude, continent, countryCode } =
//         data;
//       console.log(data);
//       console.log(`You are in ${city}, ${countryName}`);

//       return fetch(
//         `https://countries-api-836d.onrender.com/countries/name/${countryName}`
//       );
//     })
//     .then(res => {
//       if (!res.ok) throw new Error(`Error ${data.status}`);
//       return res.json();
//     })
//     .then(data => renderCountry(data[0]))
//     .catch(err =>
//       console.error(`Error, coordinates is not founded. (${err.message})`)
//     );
// };
// btn.addEventListener('click', whereAmI);

////////////////////////
// Coding Challenge #2
const images = document.querySelector('.images');

// const wait = function (seconds) {
//   return new Promise(function (resolve) {
//     setTimeout(resolve, seconds * 1000);
//   });
// };

// const createImage = function (imgPath) {
//   return new Promise(function (resolve, reject) {
//     const img = document.createElement('img');
//     img.src = imgPath;

//     img.addEventListener('load', function () {
//       // document.body.appendChild(img);
//       images.append(img);
//       resolve(img);
//     });

//     img.addEventListener('error', function (err) {
//       reject(new Error(`Image not found. (${err.status})`));
//     });
//   });
// .then(img =>
// img.addEventListener('load', function () {
// document.insertAdjacentHTML('afterend', img);
// })
// );
// };

// Com vari√°vel no global scope...
// let currentImg;

// createImage('img/img-1.jpg')
//   .then(img => {
//     currentImg = img;
//     return wait(2);
//   })
//   .then(() => {
//     currentImg.style.display = 'none';
//     return createImage('img/img-2.jpg');
//   })
//   .then(img => {
//     currentImg = img;
//     return wait(2);
//   })
//   .then(() => (currentImg.style.display = 'none'))
//   .catch(err => console.error(err));

// Sem vari√°vel no global scope...
// createImage('img/img-1.jpg')
//   .then(img => wait(2).then(() => img))
//   .then(img => {
//     img.style.display = 'none';
//     return createImage('img/img-2.jpg');
//   })
//   .then(img => wait(2).then(() => img))
//   .then(img => {
//     img.style.display = 'none';
//     return img;
//   })
//   .catch(err => console.error(err));

/////////////////
// Async/Await

// const getPosition = function () {
//   return new Promise(function (resolve, reject) {
//     navigator.geolocation.getCurrentPosition(resolve, reject);
//   });
// };

// fetch(
//   `https://countries-api-836d.onrender.com/countries/name/${country}`
// ).then(res => res.json());

// const whereAmI = async function () {
//   try {
//     // Geolocation
//     const pos = await getPosition();
//     const { latitude: lat, longitude: lng } = pos.coords;

//     // Reverse geocoding
//     const resGeo = await fetch(
//       `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lng}`
//     );

//     // Temos que colocar essa condi√ß√£o aqui manualmente pois na teoria, a chamada do fetch n√£o deu erro, pois n√£o teve nenhum problema com a conex√£o de internet ou algo assim. Ent√£o para obtermos a rejei√ß√£o dessa promise, temos que apontar o erro manualmente, que seria atrav√©s do status de resGeo.ok.
//     if (!resGeo.ok) throw new Error('Problem getting location data');
//     const dataGeo = await resGeo.json();

//     // Country data
//     const res = await fetch(
//       `https://countries-api-836d.onrender.com/countries/name/${dataGeo.countryName}`
//     );
//     if (!res.ok) throw new Error('Problem getting country');

//     const data = await res.json();
//     renderCountry(data[0]);

//     return `You are in ${dataGeo.city}, ${dataGeo.countryName}`;
//   } catch (err) {
//     console.error(`${err} üí£`);
//     renderError(`üí£ ${err.message}`);

//     // Reject promise returned from async function
//     throw err;
//   }
// };

// console.log('1: will get location');
// const city = whereAmI();
// console.log(city); // Promise

// whereAmI()
//   .then(city => console.log(`2: ${city}`))
//   .catch(err => console.error(`2: ${err.message} üí£`))
//   .finally('3: finished getting location');

// (async function () {
//   try {
//     const city = await whereAmI();
//     console.log(`2: ${city}`);
//   } catch (err) {
//     console.error(`2: ${err.message} üí£`);
//   }
//   console.log('3: finished getting location');
// })();

/*
city resulta em uma Promise, pois o JavaScript n√£o tem como
saber qual √© o retorno dessa fun√ß√£o pois ela est√° a todo 
momento rodando no background do projeto
*/

// console.log('FIRST');

////////////////////////////////////
// Error Handling With Try...Catch

// Neste c√≥digo, ao inv√©s de resultar em um erro dentro do c√≥digo e matar o pr√≥prio JS,
// conseguirmos mostrar esse erro de uma forma que o script continue rodando normalmente.
// try {
//   let y = 1;
//   const x = 2;
//   x = 3;
// } catch (err) {
//   alert(err.message);
// }

////////////////////////////////
// Running Promises in Parallel
// const get3countries = async function (c1, c2, c3) {
//   try {
// const [data1] = await getJSON(
//   `https://countries-api-836d.onrender.com/countries/name/${c1}`
// );
// const [data2] = await getJSON(
//   `https://countries-api-836d.onrender.com/countries/name/${c2}`
// );
// const [data3] = await getJSON(
//   `https://countries-api-836d.onrender.com/countries/name/${c3}`
// );
// console.log([data1.capital, data2.capital, data3.capital]);

//     const data = await Promise.all([
//       getJSON(`https://countries-api-836d.onrender.com/countries/name/${c1}`),
//       getJSON(`https://countries-api-836d.onrender.com/countries/name/${c2}`),
//       getJSON(`https://countries-api-836d.onrender.com/countries/name/${c3}`),
//     ]);
//     console.log(data.map(d => d[0].capital));
//   } catch (err) {
//     console.error(err);
//   }
// };
// get3countries('french', 'canada', 'brazil');

/*
Por que fazer diferente do convencional?
  O c√≥digo acima n√£o est√° errado, por√©m, os 3 retornos do AJAX de getJSON v√£o ser carregados um ap√≥s o outro e, isso meio que n√£o faz sentido num contexto de Asynchronous JavaScript...

Importante colocar em evid√™ncia:
  .Se uma das chamadas for rejeitada, todas ser√£o rejeitadas;
  .Sempre que precisar fazer v√°rias opera√ß√µes ass√≠ncronas e que n√£o dependem uma da outra, n√£o exite em cham√°-las paralelamente.
*/

////////////////////////////
// race, allSetlled and any

// Promise.race
// (async function () {
//   const res = await Promise.race([
//     getJSON(`https://countries-api-836d.onrender.com/countries/name/italy`),
//     getJSON(`https://countries-api-836d.onrender.com/countries/name/egypt`),
//     getJSON(`https://countries-api-836d.onrender.com/countries/name/mexico`),
//   ]);
//   console.log(res[0]);
// })();

// const timeout = function (sec) {
//   return new Promise(function (_, reject) {
//     setTimeout(function () {
//       reject(new Error('Request took too long!'));
//     }, sec * 1000);
//   });
// };

// Promise.race([
//   getJSON(`https://countries-api-836d.onrender.com/countries/name/egypt`),
//   timeout(5),
// ])
//   .then(res => console.log(res[0]))
//   .catch(err => console.error(err));

/*
Importante colocar em evid√™ncia:
  .Promise.race() sempre retornar√° apenas um valor, e n√£o um array, que ser√° o valor que retornar mais r√°pido do callback de fetch(API);
  .N√£o importa se esse retorno √© RESOLVE ou REJECT, o que importa √© quem retorna mais r√°pido.

  .No exemplo acima, Promise.race() serve para monitorar o tempo que a async function demora para ser resolvida. Caso demore mais que 5 segundo, ela √© rejeitada.
*/

// Promise.allSettled
// Promise.allSettled([
//   Promise.resolve('Success'),
//   Promise.reject('ERROR'),
//   Promise.resolve('Another success'),
// ]).then(res => console.log(res));

// Promise.all([
//   Promise.resolve('Success'),
//   Promise.reject('ERROR'),
//   Promise.resolve('Another success'),
// ]).then(res => console.log(res));

// Retorna os valores sem dar erro independente de serem resolve ou reject.

// Promise.any [ES2021]
// Promise.any([
//   Promise.resolve('success'),
//   Promise.reject('ERROR'),
//   Promise.resolve('Another success'),
// ])
//   .then(res => console.log(res))
//   .catch(err => console.log(err));

// Funciona que nem o race por√©m s√≥ retorna promises resolvidas

///////////////////////
// Coding Challenge #3

// const wait = function (seconds) {
//   return new Promise(function (resolve) {
//     setTimeout(resolve, seconds * 1000);
//   });
// };

const createImage = function (imgPath) {
  return new Promise(function (resolve, reject) {
    const img = document.createElement('img');
    img.src = imgPath;

    img.addEventListener('load', function () {
      images.append(img);
      resolve(img);
    });
    img.addEventListener('error', function (err) {
      reject(new Error(`Image not found. (${err.status})`));
    });
  });
};

// const loadNPause = async function (url1, url2) {
//   try {
//     let img = await createImage(url1);
//     if (!img) throw new Error('Image not found!');
//     await wait(2);
//     img.style.display = 'none';

//     img = await createImage(url2);
//     if (!createImage) throw new Error('Image not found!');
//     await wait(2);
//     img.style.display = 'none';
//   } catch (err) {
//     console.error(err);
//     throw err;
//   }
// };
// loadNPause('img/img-1.jpg', 'img/img-2.jpg');

const loadAll = async function (imgArr) {
  try {
    const imgs = await Promise.all(imgArr.map(img => createImage(img)));
    if (!imgs) throw new Error('Image not found!');
    console.log(imgs);
    imgs.forEach(img => img.classList.add('parallel'));
  } catch (err) {
    console.error(err);
    throw err;
  }
};
loadAll(['img/img-1.jpg', 'img/img-2.jpg', 'img/img-3.jpg']);
